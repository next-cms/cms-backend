// const withPlugins = require('next-compose-plugins');
const withSass = require('@zeit/next-sass');
const withCss = require('@zeit/next-css');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const path = require('path');
const dotenv = require('dotenv');

dotenv.config({path: path.join(__dirname, ".env")});

const webpackConfig = (config, {isServer}) => {
    // Fixes npm packages that depend on `fs` module
    config.node = {
        fs: 'empty'
    };
    if (isServer) {
        const antStyles = /antd\/.*?\/style\/css.*?/;
        const origExternals = [...config.externals];
        config.externals = [
            (context, request, callback) => {
                if (request.match(antStyles)) return callback();
                if (typeof origExternals[0] === 'function') {
                    origExternals[0](context, request, callback)
                } else {
                    callback()
                }
            },
            ...(typeof origExternals[0] === 'function' ? [] : origExternals),
        ];

        config.module.rules.unshift({
            test: antStyles,
            use: 'null-loader',
        })
        console.log("node_modules resolving from ", path.resolve(__dirname, "node_modules"));
        config.resolve = {
            ...config.resolve,
            // options for resolving module requests
            // (does not apply to resolving to loaders)
            modules: [
                ...config.resolve.modules,
                path.resolve(__dirname, "node_modules"),
                // path.resolve(__dirname)
            ],
        }
        const orgPlugins = config.plugins;
        config.plugins = [new MiniCssExtractPlugin(), ...orgPlugins];
    }
    return config
};

module.exports = withCss(withSass({
    webpack: webpackConfig
}));

// module.exports = withPlugins([
//     [withSass],
//     [withCss]
// ],{
//     webpack: webpackConfig,
//     publicRuntimeConfig: {
//         ...getURLConstants(process.env)
//     }
// });
